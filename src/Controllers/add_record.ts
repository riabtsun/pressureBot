import { User } from "../Models/User";
import { MyContext } from "../types/MyContext";

export const addRecordHandler = async (ctx: MyContext) => {
  if (!ctx.session) {
    ctx.session = {};
  }

  const user = await User.findOne({ telegramId: ctx.from!.id });

  if (!user) {
    await ctx.reply("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register.");
    return;
  }

  ctx.session.step = "WAITING_MORNING_BP";
  ctx.session.userData = ctx.session.userData || {};

  await ctx.reply(
    "üåÖ –í–≤–µ–¥—ñ—Ç—å —Ä–∞–Ω–∫–æ–≤–∏–π –∞—Ä—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Å–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –°–∏—Å—Ç–æ–ª—ñ—á–Ω–∏–π/–î—ñ–∞—Å—Ç–æ–ª—ñ—á–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 120/80):"
  );
};

export const handleAddRecord = async (ctx: MyContext) => {
  const user = await User.findOne({ telegramId: ctx.from!.id });

  if (!user) {
    await ctx.reply("‚ùå –í–∏ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.");
    return;
  }

  const messageText = ctx.message?.text?.trim();

  if (!messageText) {
    await ctx.reply("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    return;
  }

  if (ctx.session.step === "WAITING_MORNING_BP") {
    const bpMatch = messageText.match(/^(\d{2,3})\/(\d{2,3})$/);
    if (!bpMatch) {
      await ctx.reply(
        "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –°–∏—Å—Ç–æ–ª—ñ—á–Ω–∏–π/–î—ñ–∞—Å—Ç–æ–ª—ñ—á–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 120/80)."
      );
      return;
    }

    let lastRecord = user.records.pop();
    ctx.session.userData!.records!.push({
      date: new Date().toISOString().split("T")[0],
      morning: {
        systolic: parseInt(bpMatch[1]),
        diastolic: parseInt(bpMatch[2]),
        pulse: 0,
      },
      evening: {
        systolic: 0,
        diastolic: 0,
        pulse: 0,
      },
    });
    ctx.session.step = "WAITING_MORNING_PULSE";
    await ctx.reply("üíì –í–≤–µ–¥—ñ—Ç—å —Ä–∞–Ω–∫–æ–≤–∏–π –ø—É–ª—å—Å:");
  } else if (ctx.session.step === "WAITING_MORNING_PULSE") {
    const pulse = parseInt(messageText);
    if (isNaN(pulse) || pulse < 30 || pulse > 200) {
      await ctx.reply(
        "‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—É–ª—å—Å—É. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 30 –¥–æ 200."
      );
      return;
    }

    ctx.session.userData!.records!.morning!.pulse = pulse;
    ctx.session.step = "WAITING_EVENING_BP";
    await ctx.reply(
      "üåÜ –í–≤–µ–¥—ñ—Ç—å –≤–µ—á—ñ—Ä–Ω—ñ–π –∞—Ä—Ç–µ—Ä—ñ–∞–ª—å–Ω–∏–π —Ç–∏—Å–∫ —É —Ñ–æ—Ä–º–∞—Ç—ñ –°–∏—Å—Ç–æ–ª—ñ—á–Ω–∏–π/–î—ñ–∞—Å—Ç–æ–ª—ñ—á–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 120/80):"
    );
  } else if (ctx.session.step === "WAITING_EVENING_BP") {
    const bpMatch = messageText.match(/^(\d{2,3})\/(\d{2,3})$/);
    if (!bpMatch) {
      await ctx.reply(
        "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –°–∏—Å—Ç–æ–ª—ñ—á–Ω–∏–π/–î—ñ–∞—Å—Ç–æ–ª—ñ—á–Ω–∏–π (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 120/80)."
      );
      return;
    }

    ctx.session.userData!.evening = {
      systolic: parseInt(bpMatch[1]),
      diastolic: parseInt(bpMatch[2]),
      pulse: 0,
    };
    ctx.session.step = "WAITING_EVENING_PULSE";
    await ctx.reply("üíì –í–≤–µ–¥—ñ—Ç—å –≤–µ—á—ñ—Ä–Ω—ñ–π –ø—É–ª—å—Å:");
  } else if (ctx.session.step === "WAITING_EVENING_PULSE") {
    const pulse = parseInt(messageText);
    if (isNaN(pulse) || pulse < 30 || pulse > 200) {
      await ctx.reply(
        "‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –ø—É–ª—å—Å—É. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 30 –¥–æ 200."
      );
      return;
    }

    ctx.session.userData!.evening!.pulse = pulse;

    const { morning, evening } = ctx.session.userData!;
    user.records.push({
      date: new Date().toISOString().split("T")[0],
      morning,
      evening,
    });

    await user.save();

    await ctx.reply("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!");
    ctx.session.step = null;
    ctx.session.userData = {};
  }
};
